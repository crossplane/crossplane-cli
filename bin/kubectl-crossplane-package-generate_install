#!/usr/bin/env bash

set -e

function usage {
  # The reason for putting package name before package image source is it seems like package name
  # would be overridden more often than package image source, but I kept going back and
  # forth on that originally. Overriding the source is very useful when developing a
  # package locally, for example.
  echo "Usage: kubectl crossplane package generate-install [-h|--help] [-c|--cluster] [--imagePullSecret SECRET_NAME] PACKAGE_IMAGE_NAME [PACKAGE_NAME [PACKAGE_IMAGE_SOURCE]]" >&2
  echo "" >&2
  echo "PACKAGE_IMAGE_NAME is the name of the package in the registry to install." >&2
  echo "If the PACKAGE_NAME is not provided, the package name will be the PACKAGE_IMAGE_NAME with any '/' characters" >&2
  echo "converted to '-' characters." >&2
  echo "" >&2
  echo "-h, --help: Print usage" >&2
  echo "-c, --cluster: generate a ClusterStackInstall for Packages with Cluster permission scope" >&2
}

CLUSTER_STACK=""
IMAGE_PULL_SECRET=""
POSITIONAL=()

while [[ $# -gt 0 ]]; do
  opt="$1"

  case $opt in
    -c|--cluster)
      CLUSTER_STACK="Cluster"
      shift
      ;;
    --imagePullSecret=*)
      IMAGE_PULL_SECRET="${opt#*=}"
      shift;
      ;;
    --imagePullSecret)
      IMAGE_PULL_SECRET="$2"
      shift
      shift
      ;;
    -h|--help)
      usage
      exit 1
      ;;
    -*)
      echo "Unknown argument: $opt" >&2
      usage
      exit 1
      ;;
    *)
      POSITIONAL+=("$1")
      shift
      ;;
  esac
done

if [ "${#POSITIONAL[@]}" -eq "0" ]; then
  echo "Missing arguments" >&2
  usage
  exit 1
fi

# Reset the positional parameters ($1, ..) from the array of arguments
# that didn't match our known options
set -- "${POSITIONAL[@]}"

PACKAGE_IMAGE_NAME="${1}"
# For kubernetes fields, we aren't able to use slashes, and
# slashes are common for docker image names. So we remove the
# slashes before we use the name for kubernetes resource fields.
# We also can't use colons and don't want to include tags in the name.
KUBEY_PACKAGE_IMAGE_NAME=$( echo "${PACKAGE_IMAGE_NAME}" | tr '/' '-' | sed 's/:.*//' )
# Defaults to the kubey package image name, but can be overridden
# by passing arguments
PACKAGE_NAME="${2:-${KUBEY_PACKAGE_IMAGE_NAME}}"
PACKAGE_IMAGE_SOURCE="${3}"

SOURCE_SNIPPET=""

if [[ -n "${PACKAGE_IMAGE_SOURCE}" ]]; then
  # This chunk of code is used to set the "source: " field
  # to use the source argument if it was provided, but to
  # exclude the field entirely if it was not provided.
  SOURCE_SNIPPET=$( cat <<EOF
  source: "${PACKAGE_IMAGE_SOURCE}"
EOF
)
fi

SECRET_SNIPPET=""
if [[ -n "${IMAGE_PULL_SECRET}" ]]; then
  # This chunk of code is used to set the "imagePullSecrets: " field
  # to use the source argument if it was provided, but to
  # exclude the field entirely if it was not provided.
  SECRET_SNIPPET=$( cat <<EOF
  imagePullSecrets:
    - name: "${IMAGE_PULL_SECRET}"
EOF
)
fi

newline=""
if [[ -n "${SECRET_SNIPPET}" ]]; then
  newline=$'\n'
fi

INSTALL_YAML="$( cat <<EOF
apiVersion: stacks.crossplane.io/v1alpha1
kind: ${CLUSTER_STACK}StackInstall
metadata:
  name: "${PACKAGE_NAME}"
spec:
  package: "${PACKAGE_IMAGE_NAME}"
${SECRET_SNIPPET}${newline}${SOURCE_SNIPPET}
EOF
)"

# This could also have been done without a pipe, but
# doing it without a pipe hides the contents of INSTALL_YAML
# from set -x if it's being used. It's nice to be able to
# see the contents of INSTALL_YAML by just setting -x and
# not having to add an extra log line.
echo "${INSTALL_YAML}"
