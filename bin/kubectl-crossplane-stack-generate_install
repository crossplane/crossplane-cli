#!/usr/bin/env bash

set -e

function usage {
  # The reason for putting stack name before stack image source is it seems like stack name
  # would be overridden more often than stack image source, but I kept going back and
  # forth on that originally. Overriding the source is very useful when developing a
  # stack locally, for example.
  echo "Usage: kubectl crossplane stack generate-install [-h|--help] [-c|--cluster] STACK_IMAGE_NAME [STACK_NAME [STACK_IMAGE_SOURCE]]" >&2
  echo "" >&2
  echo "STACK_IMAGE_NAME is the name of the stack in the registry to install." >&2
  echo "If the STACK_NAME is not provided, the stack name will be the STACK_IMAGE_NAME with any '/' characters" >&2
  echo "converted to '-' characters." >&2
  echo "" >&2
  echo "-h, --help: Print usage" >&2
  echo "-c, --cluster: generate a ClusterStackInstall for Stacks with Cluster permission scope" >&2
}

function check_help {
  if [ "${1}" == "-h" -o "${1}" == "--help" ] ; then
    usage
    exit 1
  fi
}

check_help "${1}"

if [[ $# -lt 1 ]] ; then
  usage
  exit 1
fi

CLUSTER_OPT="${1}"
if [ "${CLUSTER_OPT}" == "-c" -o "${CLUSTER_OPT}" == "--cluster" ]; then
  CLUSTER_STACK="Cluster"
  shift
else
  CLUSTER_STACK=""
fi

STACK_IMAGE_NAME="${1}"
# For kubernetes fields, we aren't able to use slashes, and
# slashes are common for docker image names. So we remove the
# slashes before we use the name for kubernetes resource fields.
KUBEY_STACK_IMAGE_NAME=$( echo "${STACK_IMAGE_NAME}" | tr '/' '-' )
# Defaults to the kubey stack image name, but can be overridden
# by passing arguments
STACK_NAME="${2:-${KUBEY_STACK_IMAGE_NAME}}"
STACK_IMAGE_SOURCE="${3}"

SOURCE_SNIPPET=""

if [[ -n "${STACK_IMAGE_SOURCE}" ]]; then
  # This chunk of code is used to set the "source: " field
  # to use the source argument if it was provided, but to
  # exclude the field entirely if it was not provided.
  SOURCE_SNIPPET=$( cat <<EOF
  source: "${STACK_IMAGE_SOURCE}"
EOF
)
fi

INSTALL_YAML="$( cat <<EOF
apiVersion: stacks.crossplane.io/v1alpha1
kind: ${CLUSTER_STACK}StackInstall
metadata:
  name: "${STACK_NAME}"
spec:
  package: "${STACK_IMAGE_NAME}"
${SOURCE_SNIPPET}
EOF
)"

# This could also have been done without a pipe, but
# doing it without a pipe hides the contents of INSTALL_YAML
# from set -x if it's being used. It's nice to be able to
# see the contents of INSTALL_YAML by just setting -x and
# not having to add an extra log line.
echo "${INSTALL_YAML}"
